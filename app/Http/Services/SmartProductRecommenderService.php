<?php

namespace App\Http\Services;

use Illuminate\Support\Facades\Log;

class SmartProductRecommenderService
{
    private $productData;
    private $categoryKeywords = [];
    private $productSynonyms = [];
    private $contextualRules = [];
    private $colorKeywords = [];
    
    public function __construct($productData) {
        $this->productData = $productData;
        $this->initializeCategoryKeywords();
        $this->initializeProductSynonyms();
        $this->initializeContextualRules();
        $this->initializeColorKeywords();
    }
    
    public function getSmartRecommendations($message) {
        $message = mb_strtolower($message, 'UTF-8');
        
        // Renk tercihi algƒ±la
        $detectedColor = $this->detectColorFromMessage($message);
        
        // Kategori tespit et
        $detectedCategory = $this->detectCategoryFromMessage($message);
        
        // Fiyat tercihi algƒ±la
        $detectedPrice = $this->detectPricePreference($message);
        
        // Marka tercihi algƒ±la
        $detectedBrand = $this->detectBrandPreference($message);
        
        // √úr√ºnleri filtrele
        $filteredProducts = $this->filterProductsByPreferences($detectedColor, $detectedCategory, $detectedPrice, $detectedBrand);
        
        if (empty($filteredProducts)) {
            return [
                'products' => [],
                'response' => 'Aradƒ±ƒüƒ±nƒ±z kriterlere uygun √ºr√ºn bulamadƒ±m. Farklƒ± bir arama yapmayƒ± deneyin.',
                'reason' => 'Arama sonucu bulunamadƒ±',
                'category_matched' => $detectedCategory ? $detectedCategory['name'] : null,
                'total_found' => 0,
                'suggestions' => $this->generateSuggestions($detectedColor, $detectedCategory, $detectedPrice, $detectedBrand)
            ];
        }
        
        // Yanƒ±t metni olu≈ütur
        $response = $this->generateColorBasedResponse($detectedColor, $detectedCategory, $detectedPrice, $detectedBrand);
        
        return [
            'products' => array_slice($filteredProducts, 0, 5),
            'response' => $response,
            'reason' => $this->generateRecommendationReason($detectedColor, $detectedCategory, $detectedPrice, $detectedBrand),
            'category_matched' => $detectedCategory ? $detectedCategory['name'] : null,
            'total_found' => count($filteredProducts),
            'suggestions' => $this->generateSuggestions($detectedColor, $detectedCategory, $detectedPrice, $detectedBrand),
            'preferences' => [
                'color' => $detectedColor,
                'category' => $detectedCategory,
                'price' => $detectedPrice,
                'brand' => $detectedBrand
            ]
        ];
    }
    
    private function detectColorFromMessage($message) {
        foreach ($this->colorKeywords as $colorName => $colorData) {
            foreach ($colorData['synonyms'] as $synonym) {
                if (mb_strpos($message, $synonym) !== false) {
                    return [
                        'name' => $colorName,
                        'synonyms' => $colorData['synonyms'],
                        'hex_codes' => $colorData['hex_codes'],
                        'categories' => $colorData['categories'],
                        'priority' => $colorData['priority']
                    ];
                }
            }
        }
        return null;
    }
    
    private function detectCategoryFromMessage($message) {
        $bestMatch = null;
        $highestScore = 0;
        
        foreach ($this->categoryKeywords as $categoryKey => $categoryData) {
            $score = $this->calculateCategoryMatchScore($message, $categoryData['keywords']);
            
            if ($score > $highestScore) {
                $highestScore = $score;
                $bestMatch = [
                    'name' => $categoryKey,
                    'categories' => $categoryData['categories'],
                    'priority' => $categoryData['priority']
                ];
            }
        }
        
        // E≈üik deƒüeri kontrol√º
        if ($highestScore >= 0.1) {
            return $bestMatch;
        }
        
        return null;
    }
    
    private function calculateCategoryMatchScore($message, $keywords) {
        $score = 0;
        $keywordCount = 0;
        $totalKeywords = count($keywords);
        
        // Doƒürudan anahtar kelime e≈üle≈ümesi
        foreach ($keywords as $keyword) {
            if (mb_strpos($message, $keyword) !== false) {
                $score += 2.0;
                $keywordCount++;
            }
        }
        
        // E≈üanlamlƒ± kelimeleri kontrol et
        foreach ($this->productSynonyms as $mainWord => $synonyms) {
            if (mb_strpos($message, $mainWord) !== false) {
                foreach ($synonyms as $synonym) {
                    if (mb_strpos($message, $synonym) !== false) {
                        $score += 1.5;
                        $keywordCount++;
                    }
                }
            }
        }
        
        if ($keywordCount > 0) {
            $confidence = $score / $totalKeywords;
            return min($confidence, 1.0);
        }
        
        return 0;
    }
    
    private function detectPricePreference($message) {
        $priceKeywords = [
            'ucuz' => ['ucuz', 'ekonomik', 'uygun fiyat', 'd√º≈ü√ºk fiyat', 'b√ºt√ße'],
            'pahalƒ±' => ['pahalƒ±', 'premium', 'l√ºks', 'kaliteli', 'y√ºksek fiyat'],
            'orta' => ['orta', 'normal', 'makul', 'standart']
        ];
        
        foreach ($priceKeywords as $priceType => $keywords) {
            foreach ($keywords as $keyword) {
                if (mb_strpos($message, $keyword) !== false) {
                    return [
                        'type' => $priceType,
                        'keywords' => $keywords
                    ];
                }
            }
        }
        return null;
    }
    
    private function detectBrandPreference($message) {
        $brandKeywords = [
            'apple' => ['apple', 'iphone', 'macbook', 'ipad', 'mac'],
            'samsung' => ['samsung', 'galaxy', 'note', 'tab'],
            'nike' => ['nike', 'nike ayakkabƒ±', 'nike spor'],
            'adidas' => ['adidas', 'adidas ayakkabƒ±', 'adidas spor'],
            'sony' => ['sony', 'sony tv', 'sony kulaklƒ±k'],
            'lg' => ['lg', 'lg tv', 'lg telefon']
        ];
        
        foreach ($brandKeywords as $brandName => $keywords) {
            foreach ($keywords as $keyword) {
                if (mb_strpos($message, $keyword) !== false) {
                    return [
                        'name' => $brandName,
                        'keywords' => $keywords
                    ];
                }
            }
        }
        return null;
    }
    
    private function filterProductsByPreferences($color, $category, $price, $brand) {
        $allProducts = $this->productData->getAllProducts();
        $filteredProducts = [];
        
        foreach ($allProducts as $product) {
            $score = 0;
            
            // Renk skoru (en y√ºksek √∂ncelik)
            if ($color) {
                $score += $this->calculateColorScore($product, $color);
            }
            
            // Kategori skoru
            if ($category && in_array($product['category'], $category['categories'])) {
                $score += 2;
            }
            
            // Marka skoru
            if ($brand && mb_strtolower($product['brand']) === mb_strtolower($brand['name'])) {
                $score += 2;
            }
            
            // Fiyat skoru
            if ($price) {
                $score += $this->calculatePriceScore($product, $price);
            }
            
            // Genel kalite skoru
            $score += $product['rating'] * 0.5;
            
            if ($score > 0) {
                $product['_score'] = $score;
                $filteredProducts[] = $product;
            }
        }
        
        // Skora g√∂re sƒ±rala
        usort($filteredProducts, function($a, $b) {
            return $b['_score'] <=> $a['_score'];
        });
        
        return $filteredProducts;
    }
    
    private function calculateColorScore($product, $color) {
        // Renk √∂nceliƒüine g√∂re skor ver
        $baseScore = $color['priority'];
        
        // √úr√ºn kategorisi renk kategorilerinde varsa bonus puan
        if (in_array($product['category'], $color['categories'])) {
            $baseScore += 1;
        }
        
        // √úr√ºn adƒ±nda renk ge√ßiyorsa bonus puan
        $productName = mb_strtolower($product['name']);
        foreach ($color['synonyms'] as $synonym) {
            if (mb_strpos($productName, $synonym) !== false) {
                $baseScore += 2;
                break;
            }
        }
        
        return $baseScore;
    }
    
    private function calculatePriceScore($product, $price) {
        $productPrice = $product['price'];
        
        switch ($price['type']) {
            case 'ucuz':
                return $productPrice < 1000 ? 3 : ($productPrice < 5000 ? 1 : 0);
            case 'pahalƒ±':
                return $productPrice > 10000 ? 3 : ($productPrice > 5000 ? 1 : 0);
            case 'orta':
                return ($productPrice >= 1000 && $productPrice <= 10000) ? 2 : 0;
            default:
                return 0;
        }
    }
    
    private function generateColorBasedResponse($color, $category, $price, $brand) {
        $response = '';
        
        if ($color) {
            $response .= "üé® {$color['name']} renkteki ";
        }
        
        if ($category) {
            $response .= "{$category['name']} kategorisinde ";
        }
        
        if ($brand) {
            $response .= "{$brand['name']} markasƒ±nƒ±n ";
        }
        
        if ($price) {
            $response .= "{$price['type']} fiyatlƒ± ";
        }
        
        $response .= "en kaliteli √ºr√ºnleri √∂neriyorum. ƒ∞≈üte harika se√ßenekler:";
        
        return $response;
    }
    
    private function generateRecommendationReason($color, $category, $price, $brand) {
        $reasons = [];
        
        if ($color) {
            $reasons[] = "Renk: {$color['name']}";
        }
        
        if ($category) {
            $reasons[] = "Kategori: {$category['name']}";
        }
        
        if ($brand) {
            $reasons[] = "Marka: {$brand['name']}";
        }
        
        if ($price) {
            $reasons[] = "Fiyat: {$price['type']}";
        }
        
        return implode(', ', $reasons);
    }
    
    private function generateSuggestions($color, $category, $price, $brand) {
        $suggestions = [];
        
        if ($color) {
            $suggestions[] = "Farklƒ± renk se√ßenekleri";
        }
        
        if ($category) {
            $suggestions[] = "Farklƒ± kategori √∂ner";
        }
        
        if ($price) {
            $suggestions[] = "Fiyat aralƒ±ƒüƒ±nƒ± deƒüi≈ütir";
        }
        
        if ($brand) {
            $suggestions[] = "Farklƒ± marka √∂ner";
        }
        
        if (empty($suggestions)) {
            $suggestions = ["Farklƒ± kategori √∂ner", "Fiyat aralƒ±ƒüƒ± belirle", "Marka √∂nerisi al"];
        }
        
        return $suggestions;
    }
    
    private function initializeCategoryKeywords() {
        $this->categoryKeywords = [
            'pet_shop' => [
                'keywords' => ['k√∂pek', 'kedi', 'pet', 'hayvan', 'mama', 'evcil', 'ku≈ü', 'balƒ±k', 'hamster', 'tav≈üan', 'kaplumbaƒüa', 's√ºr√ºngen'],
                'categories' => ['Kedi Mamasƒ±', 'K√∂pek Mamasƒ±', 'Pet Shop'],
                'priority' => 1
            ],
            'electronics' => [
                'keywords' => ['telefon', 'iphone', 'samsung', 'bilgisayar', 'laptop', 'tablet', 'ipad', 'kulaklƒ±k', 'televizyon', 'tv', 'oyun', 'playstation', 'xbox'],
                'categories' => ['Telefon', 'Bilgisayar', 'Tablet', 'Kulaklƒ±k', 'Televizyon', 'Oyun Konsolu'],
                'priority' => 1
            ],
            'clothing' => [
                'keywords' => ['giyim', 'kƒ±yafet', 'elbise', 'ayakkabƒ±', 'spor', 'nike', 'adidas', 'ceket', 'pantolon', 'g√∂mlek', 'tshirt', 'hƒ±rka'],
                'categories' => ['Spor Ayakkabƒ±', 'Kot Pantolon', 'Polo Yaka', 'Ceket', 'Elbise', 'G√∂mlek', 'Sweatshirt', 'Etek', '√áanta'],
                'priority' => 1
            ],
            'home_living' => [
                'keywords' => ['ev', 'mobilya', 'dekorasyon', 'mutfak', 'banyo', 'yatak odasƒ±', 'salon', 'ikea', 'mobilya', 'ev e≈üyasƒ±', 'ya≈üam'],
                'categories' => ['Mobilya', 'Aydƒ±nlatma', 'Beyaz E≈üya', 'Mutfak'],
                'priority' => 1
            ],
            'sports_outdoor' => [
                'keywords' => ['spor', 'fitness', 'egzersiz', 'ko≈üu', 'y√ºr√ºy√º≈ü', 'bisiklet', 'y√ºzme', 'futbol', 'basketbol', 'tenis', 'golf', 'outdoor'],
                'categories' => ['Bisiklet', 'Spor Ayakkabƒ±', 'Mont', 'Ceket', 'Hƒ±rka', 'Spor √áanta', 'Spor √áorap', '≈ûort', 'Spor Tshirt', 'Spor Pantolon'],
                'priority' => 1
            ],
            'beauty_cosmetics' => [
                'keywords' => ['kozmetik', 'makyaj', 'cilt bakƒ±mƒ±', 'sa√ß bakƒ±mƒ±', 'parf√ºm', 'ruj', 'fond√∂ten', 'g√∂z farƒ±', '≈üampuan', 'nemlendirici'],
                'categories' => ['≈ûampuan', 'Y√ºz Bakƒ±mƒ±', 'Nemlendirici', 'Makyaj', 'G√ºne≈ü Bakƒ±mƒ±', 'Serum'],
                'priority' => 1
            ],
            'books_hobbies' => [
                'keywords' => ['kitap', 'okuma', 'hobi', 'oyuncak', 'lego', 'oyun', 'puzzle', 'sanat', 'm√ºzik', 'film', 'dizi', 'roman', 'bilim'],
                'categories' => ['Kitap', 'Oyuncak', 'Oyun'],
                'priority' => 1
            ],
            'automotive' => [
                'keywords' => ['araba', 'otomobil', 'ara√ß', 'lastik', 'ak√º', 'motor yaƒüƒ±', 'bakƒ±m', 'servis', 'par√ßa', 'aksesuar'],
                'categories' => ['Lastik', 'Ak√º', 'Motor Yaƒüƒ±'],
                'priority' => 1
            ],
            'health_medicine' => [
                'keywords' => ['saƒülƒ±k', 'ila√ß', 'vitamin', 'mineral', 'aƒürƒ± kesici', 'ate≈ü d√º≈ü√ºr√ºc√º', 'baƒüƒ±≈üƒ±klƒ±k', 'enerji', 'uyku', 'stres'],
                'categories' => ['Aƒürƒ± Kesici', 'Vitamin', 'Mineral'],
                'priority' => 1
            ],
            'garden_tools' => [
                'keywords' => ['bah√ße', '√ßi√ßek', 'bitki', 'aƒüa√ß', '√ßim', 'tƒ±rmƒ±k', 'makas', '√ßim bi√ßme', 'testere', 'el aleti', 'matkap', 'tornavida'],
                'categories' => ['Bah√ße Aleti', 'Bah√ße Makinesi', 'El Aleti'],
                'priority' => 1
            ]
        ];
    }
    
    private function initializeProductSynonyms() {
        $this->productSynonyms = [
            // Pet Shop
            'k√∂pek' => ['pet', 'hayvan', 'evcil', 'mama', 'k√∂pek mamasƒ±', 'k√∂pek oyuncaƒüƒ±', 'k√∂pek tasmasƒ±'],
            'kedi' => ['pet', 'hayvan', 'evcil', 'mama', 'kedi mamasƒ±', 'kedi oyuncaƒüƒ±', 'kedi kumu'],
            'pet' => ['k√∂pek', 'kedi', 'hayvan', 'evcil', 'mama', 'oyuncak', 'aksesuar'],
            
            // Electronics
            'telefon' => ['iphone', 'samsung', 'galaxy', 'smartphone', 'mobil', 'cep telefonu'],
            'bilgisayar' => ['laptop', 'macbook', 'dell', 'hp', 'lenovo', 'notebook', 'diz√ºst√º'],
            'tablet' => ['ipad', 'samsung tab', 'android tablet', 'dijital tablet'],
            
            // Clothing
            'ayakkabƒ±' => ['spor ayakkabƒ±', 'g√ºnl√ºk ayakkabƒ±', 'topuklu', 'd√ºz', 'sneaker'],
            'kƒ±yafet' => ['elbise', 'pantolon', 'g√∂mlek', 'tshirt', 'hƒ±rka', 'ceket', 'e≈üofman'],
            
            // Home & Living
            'ev' => ['mobilya', 'dekorasyon', 'mutfak', 'banyo', 'yatak odasƒ±', 'salon'],
            'mobilya' => ['yatak', 'dolap', 'masa', 'sandalye', 'koltuk', 'sehpa'],
            
            // Sports
            'spor' => ['fitness', 'egzersiz', 'ko≈üu', 'y√ºr√ºy√º≈ü', 'bisiklet', 'y√ºzme'],
            'fitness' => ['spor', 'egzersiz', 'ko≈üu', 'y√ºr√ºy√º≈ü', 'bisiklet', 'y√ºzme'],
            
            // Beauty
            'kozmetik' => ['makyaj', 'cilt bakƒ±mƒ±', 'sa√ß bakƒ±mƒ±', 'parf√ºm', 'ruj', 'fond√∂ten'],
            'makyaj' => ['kozmetik', 'ruj', 'fond√∂ten', 'g√∂z farƒ±', 'maskara', 'allƒ±k'],
            
            // Books & Hobbies
            'kitap' => ['roman', 'bilim', 'tarih', 'felsefe', 'psikoloji', 'roman'],
            'hobi' => ['oyuncak', 'lego', 'oyun', 'puzzle', 'sanat', 'm√ºzik'],
            
            // Automotive
            'araba' => ['otomobil', 'ara√ß', 'lastik', 'ak√º', 'motor yaƒüƒ±', 'bakƒ±m'],
            'lastik' => ['araba', 'otomobil', 'ara√ß', 'tekerlek', 'kau√ßuk'],
            
            // Health
            'saƒülƒ±k' => ['ila√ß', 'vitamin', 'mineral', 'aƒürƒ± kesici', 'ate≈ü d√º≈ü√ºr√ºc√º'],
            'vitamin' => ['saƒülƒ±k', 'mineral', 'baƒüƒ±≈üƒ±klƒ±k', 'enerji', 'beslenme'],
            
            // Garden & Tools
            'bah√ße' => ['√ßi√ßek', 'bitki', 'aƒüa√ß', '√ßim', 'tƒ±rmƒ±k', 'makas'],
            'el aleti' => ['matkap', 'tornavida', '√ßeki√ß', 'pense', 'anahtar']
        ];
    }
    
    private function initializeContextualRules() {
        $this->contextualRules = [
            'color_preference' => [
                'keywords' => ['kƒ±rmƒ±zƒ±', 'mavi', 'ye≈üil', 'sarƒ±', 'turuncu', 'mor', 'pembe', 'siyah', 'beyaz', 'gri', 'kahverengi', 'lacivert', 'turkuaz', 'altƒ±n', 'g√ºm√º≈ü'],
                'priority' => 2,
                'response_template' => 'Renk tercihinize g√∂re √ºr√ºnleri √∂neriyorum. {color} renkteki en kaliteli se√ßenekler:'
            ],
            'size_preference' => [
                'keywords' => ['k√º√ß√ºk', 'orta', 'b√ºy√ºk', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'k√º√ß√ºk boy', 'b√ºy√ºk boy'],
                'priority' => 1,
                'response_template' => 'Boyut tercihinize g√∂re √ºr√ºnleri √∂neriyorum. {size} boyuttaki se√ßenekler:'
            ],
            'price_preference' => [
                'keywords' => ['ucuz', 'pahalƒ±', 'ekonomik', 'premium', 'l√ºks', 'b√ºt√ße', 'indirimli', 'kampanyalƒ±'],
                'priority' => 1,
                'response_template' => 'Fiyat tercihinize g√∂re √ºr√ºnleri √∂neriyorum. {price_type} fiyatlƒ± se√ßenekler:'
            ],
            'brand_preference' => [
                'keywords' => ['apple', 'samsung', 'nike', 'adidas', 'sony', 'lg', 'dell', 'hp', 'lenovo'],
                'priority' => 1,
                'response_template' => 'Marka tercihinize g√∂re √ºr√ºnleri √∂neriyorum. {brand} markasƒ±nƒ±n en iyi √ºr√ºnleri:'
            ]
        ];
    }
    
    private function initializeColorKeywords() {
        $this->colorKeywords = [
            'kƒ±rmƒ±zƒ±' => [
                'synonyms' => ['kƒ±rmƒ±zƒ±', 'red', 'kƒ±zƒ±l', 'al', 'kan rengi'],
                'hex_codes' => ['#FF0000', '#DC143C', '#B22222', '#8B0000'],
                'categories' => ['Telefon', 'Bilgisayar', 'Kulaklƒ±k', 'Spor Ayakkabƒ±', 'Elbise', '√áanta', 'Aksesuar'],
                'priority' => 3
            ],
            'mavi' => [
                'synonyms' => ['mavi', 'blue', 'lacivert', 'navy', 'g√∂k mavisi'],
                'hex_codes' => ['#0000FF', '#000080', '#4169E1', '#1E90FF'],
                'categories' => ['Telefon', 'Bilgisayar', 'Kulaklƒ±k', 'Spor Ayakkabƒ±', 'Elbise', '√áanta', 'Aksesuar'],
                'priority' => 3
            ],
            'ye≈üil' => [
                'synonyms' => ['ye≈üil', 'green', 'a√ßƒ±k ye≈üil', 'koyu ye≈üil', 'z√ºmr√ºt'],
                'hex_codes' => ['#008000', '#228B22', '#32CD32', '#90EE90'],
                'categories' => ['Telefon', 'Bilgisayar', 'Kulaklƒ±k', 'Spor Ayakkabƒ±', 'Elbise', '√áanta', 'Aksesuar'],
                'priority' => 3
            ],
            'siyah' => [
                'synonyms' => ['siyah', 'black', 'koyu', 'kara', 'ebony'],
                'hex_codes' => ['#000000', '#1C1C1C', '#2F2F2F', '#404040'],
                'categories' => ['Telefon', 'Bilgisayar', 'Kulaklƒ±k', 'Spor Ayakkabƒ±', 'Elbise', '√áanta', 'Aksesuar'],
                'priority' => 3
            ],
            'beyaz' => [
                'synonyms' => ['beyaz', 'white', 'a√ßƒ±k', 'buz beyazƒ±', 'fildi≈üi'],
                'hex_codes' => ['#FFFFFF', '#F5F5F5', '#F0F0F0', '#E8E8E8'],
                'categories' => ['Telefon', 'Bilgisayar', 'Kulaklƒ±k', 'Spor Ayakkabƒ±', 'Elbise', '√áanta', 'Aksesuar'],
                'priority' => 3
            ]
        ];
    }
}
